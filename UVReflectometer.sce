// Data Acquisition and Processing Software for UV-Reflectometer - Sept 2020 Klaus Wojczykowski
// This GUI file is generated by guibuilder version 3.0


////////// Window for application
f=figure('figure_position',[496,76],'figure_size',[700,600],'auto_resize','on','background',[33],'figure_name','UV Reflectometer');

////////// Generate all objects for GUI
delmenu(f.figure_id,gettext('File'))
delmenu(f.figure_id,gettext('?'))
delmenu(f.figure_id,gettext('Tools'))
toolbar(f.figure_id,'off')
handles.dummy = 0;
handles.TXTconnect=uicontrol(f,'unit','normalized','BackgroundColor',[0.8,0.8,0.8],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[1,1,1],'HorizontalAlignment','left','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.0171875,0.8825,0.3134375,0.045],'Relief','default','SliderStep',[0.01,0.1],'String','Connect UV Reflectometer via USB','Style','text','Value',[0],'VerticalAlignment','top','Visible','on','Tag','TXTconnect','Callback','')
handles.TXTpanel=uicontrol(f,'unit','normalized','BackgroundColor',[0.8,0.8,0.8],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[1,1,1],'HorizontalAlignment','left','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.0171875,0.7244792,0.3134375,0.045],'Relief','default','SliderStep',[0.01,0.1],'String','Check Panels','Style','text','Value',[0],'VerticalAlignment','top','Visible','on','Tag','TXTpanel','Callback','')
handles.TXTscan=uicontrol(f,'unit','normalized','BackgroundColor',[0.8,0.8,0.8],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[1,1,1],'HorizontalAlignment','left','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.0171875,0.5708334,0.3134375,0.045],'Relief','default','SliderStep',[0.01,0.1],'String','Start Reflectivity Scan','Style','text','Value',[0],'VerticalAlignment','top','Visible','on','Tag','TXTscan','Callback','')
handles.TXTresults=uicontrol(f,'unit','normalized','BackgroundColor',[0.8,0.8,0.8],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[1,1,1],'HorizontalAlignment','left','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.0171875,0.4071875,0.3134375,0.045],'Relief','default','SliderStep',[0.01,0.1],'String','Results','Style','text','Value',[0],'VerticalAlignment','top','Visible','on','Tag','TXTresults','Callback','')
handles.TXTsave=uicontrol(f,'unit','normalized','BackgroundColor',[0.8,0.8,0.8],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[1,1,1],'HorizontalAlignment','left','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.4171875,0.0570833,0.3234375,0.045],'Relief','default','SliderStep',[0.01,0.1],'String','Save Scan','Style','text','Value',[0],'VerticalAlignment','top','Visible','on','Tag','TXTsave','Callback','')
handles.TXTxaxlbl=uicontrol(f,'unit','normalized','BackgroundColor',[0.8,0.8,0.8],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[0,0,0],'HorizontalAlignment','left','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.6971875,0.070833,0.3234375,0.045],'Relief','default','SliderStep',[0.01,0.1],'String','deg.','Style','text','Value',[0],'VerticalAlignment','top','Visible','on','Tag','TXTsave','Callback','')
handles.TXTyaxlbl=uicontrol(f,'unit','normalized','BackgroundColor',[0.8,0.8,0.8],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[0,0,0],'HorizontalAlignment','left','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.36,0.38,0.07,0.045],'Relief','default','SliderStep',[0.01,0.1],'String','ÂµW/cm2','Style','text','Value',[0],'VerticalAlignment','top','Visible','on','Tag','TXTsave','Callback','')
handles.pb_COM1=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','off','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','center','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.014375,0.81875,0.105625,0.05625],'Relief','default','SliderStep',[0.01,0.1],'String','COM1','Style','pushbutton','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','pb_COM1','Callback','pb_COM1_callback(handles)')
handles.pb_COM2=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','off','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','center','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.1236719,0.81875,0.1096875,0.05625],'Relief','default','SliderStep',[0.01,0.1],'String','COM2','Style','pushbutton','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','pb_COM2','Callback','pb_COM2_callback(handles)')
handles.pb_COM3=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','off','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','center','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.2370313,0.81875,0.1021875,0.05625],'Relief','default','SliderStep',[0.01,0.1],'String','COM3','Style','pushbutton','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','pb_COM3','Callback','pb_COM3_callback(handles)')
handles.pb_COM4=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','off','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','center','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.3428906,0.81875,0.106875,0.05625],'Relief','default','SliderStep',[0.01,0.1],'String','COM4','Style','pushbutton','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','pb_COM4','Callback','pb_COM4_callback(handles)')
handles.pb_COM5=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','off','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','center','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.4534375,0.81875,0.1090625,0.05625],'Relief','default','SliderStep',[0.01,0.1],'String','COM5','Style','pushbutton','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','pb_COM5','Callback','pb_COM5_callback(handles)')
handles.pb_COM6=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','off','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','center','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.5661719,0.81875,0.1053125,0.05625],'Relief','default','SliderStep',[0.01,0.1],'String','COM6','Style','pushbutton','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','pb_COM6','Callback','pb_COM6_callback(handles)')
handles.pb_COM7=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','off','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','center','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.6751563,0.81875,0.1040625,0.05625],'Relief','default','SliderStep',[0.01,0.1],'String','COM7','Style','pushbutton','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','pb_COM7','Callback','pb_COM7_callback(handles)')
handles.pb_COM8=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','off','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','center','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.7828906,0.81875,0.1075,0.05625],'Relief','default','SliderStep',[0.01,0.1],'String','COM8','Style','pushbutton','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','pb_COM8','Callback','pb_COM8_callback(handles)')
handles.pb_COM9=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','off','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','center','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.8940625,0.81875,0.096875,0.05625],'Relief','default','SliderStep',[0.01,0.1],'String','COM9','Style','pushbutton','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','pb_COM9','Callback','pb_COM9_callback(handles)')
handles.ax_rplot= newaxes();handles.ax_rplot.margins = [ 0 0 0 0];handles.ax_rplot.axes_bounds = [0.47,0.3854167,0.50,0.44625];
handles.pb_save=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','center','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.4110938,0.009,0.115625,0.0583333],'Relief','default','SliderStep',[0.01,0.1],'String','Save','Style','pushbutton','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','pb_save','Callback','pb_save_callback(handles)')
handles.pb_scan=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[18],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','center','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.0009375,0.4741667,0.109375,0.0920833],'Relief','default','SliderStep',[0.01,0.1],'String','Scan','Style','pushbutton','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','pb_scan','Callback','pb_scan_callback(handles)')
handles.TXTstat=uicontrol(f,'unit','normalized','BackgroundColor',[0.8,0.8,1],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','left','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.1075,0.4741667,0.2353125,0.0920833],'Relief','default','SliderStep',[0.01,0.1],'String','Status','Style','text','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','TXTstat','Callback','')
handles.lst_results=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','left','ListboxTop',[0],'Max',[0],'Min',[0],'Position',[-0.072625,0.02375,0.4140625,0.3683333],'Relief','default','SliderStep',[0.01,0.1],'String','no scan','Style','table','Value',[1],'VerticalAlignment','middle','Visible','on','Tag','lst_results','Callback','lst_results_callback(handles)')
handles.TXTuvon=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[18],'FontUnits','points','FontWeight','normal','ForegroundColor',[0,1,0],'HorizontalAlignment','center','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.7484375,0.65625,0.15,0.0833333],'Relief','default','SliderStep',[0.01,0.1],'String','UV OFF','Style','text','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','TXTuvon','Callback','')
handles.pb_LPanel=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','center','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.0140625,0.65,0.21,0.06],'Relief','default','SliderStep',[0.01,0.1],'String','Lower Panel In','Style','pushbutton','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','pb_LPanel','Callback','pb_LPanel_callback(handles)')
handles.pb_UPanel=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','center','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.360625,0.6516667,0.21,0.06],'Relief','default','SliderStep',[0.01,0.1],'String','Upper Panel In','Style','pushbutton','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','pb_UPanel','Callback','pb_UPanel_callback(handles)')
handles.TXT_LPan=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','left','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.22875,0.6479167,0.0546875,0.0620833],'Relief','default','SliderStep',[0.01,0.1],'String','?','Style','text','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','TXT_LPan','Callback','')
handles.TXT_UPan=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[12],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','left','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.571875,0.6479167,0.0546875,0.0620833],'Relief','default','SliderStep',[0.01,0.1],'String','?','Style','text','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','TXT_UPan','Callback','')
handles.pb_exit=uicontrol(f,'unit','normalized','BackgroundColor',[-1,-1,-1],'Enable','on','FontAngle','normal','FontName','Tahoma','FontSize',[18],'FontUnits','points','FontWeight','normal','ForegroundColor',[-1,-1,-1],'HorizontalAlignment','center','ListboxTop',[],'Max',[1],'Min',[0],'Position',[0.85625,0.0088106,0.125,0.0682819],'Relief','default','SliderStep',[0.01,0.1],'String','EXIT','Style','pushbutton','Value',[0],'VerticalAlignment','middle','Visible','on','Tag','pb_exit','Callback','pb_exit_callback(handles)')

// Declare global variables and define initial ("empty") values
 global LPanIn  //Set "Lower Panel in" to False (not yet checked)
 LPanIn = %F
 global UPanIn //Set "Upper Panel in" to False (not yet checked)
 UPanIn = %F
 global UV
 UV(1:200, 1:2) = 0 // intensity matrix: first column backgound UV intensity; second column: scan UV intensity; 200 rows (degrees of scan range)
 global UVind // pointer for current row in UV intensity matrix
 UVind = 1
 global UVfile // file name
 UVfile = ""
 global SCRES
 SCRES(1:15, 1:3) = "" // results matrix: first column name of parameters; second column calculated value
 
// STARTUP

try    
closeserial(h); //start with closing any serial connection when another instance of the program was started before
xpause(200000);
catch
  disp("no old connection to close"); //if no instance started before
end

con = 0; //number of COM Port that seems connected - Initially "0" when/while none is found (yet)
while con == 0 do
 
disp("Serial Communication");
handles.TXTstat.String="Check USB";

  
for i = 1:9 // check COM Ports 1 to 9 (newer versions of SCILAB seem to support also COM >9....feel free to extend)
xpause(200000);
  l(i)=1; //vector of COM statuses 0 = no connection possible - 1 = connection possible
try    
h=openserial(i,"9600,n,8,1"); // Try the serial connection with standard baud rate, parity etc. as defined in ARDUINO firmware
xpause(200000);

catch
  l(i)=0; // When connection with COM i failed then overwrite the entry in status vector with 0
end

if l(i) == 1 then // When status vector entry not overwritten (no error) then connected COM port was found
    con = i;

 closeserial(h); // close for now while other ports are scanned 
end

end

if con <> 0 then // display in status if connected port found
    handles.TXTstat.String="Connecting...";
else
    handles.TXTstat.String="No Device found";
end

// graphic representation of port statuses using push button objects
handles.pb_COM1.BackgroundColor=[1-l(1),l(1),0];
handles.pb_COM2.BackgroundColor=[1-l(2),l(2),0];
handles.pb_COM3.BackgroundColor=[1-l(3),l(3),0];
handles.pb_COM4.BackgroundColor=[1-l(4),l(4),0];
handles.pb_COM5.BackgroundColor=[1-l(5),l(5),0];
handles.pb_COM6.BackgroundColor=[1-l(6),l(6),0];
handles.pb_COM7.BackgroundColor=[1-l(7),l(7),0];
handles.pb_COM8.BackgroundColor=[1-l(8),l(8),0];
handles.pb_COM9.BackgroundColor=[1-l(9),l(9),0];

end

h=openserial(con,"9600,n,8,1"); // connect with the highest COM port number of found devices

xpause(200000);
  handles.h = h;

if h == -1 then
  handles.TXTstat.String="USB Communication Error"; // something went wrong after all....for now the end of the program - requires restart

  else
  handles.TXTstat.String="Reflectometer Connected"; // display status if connection successful
end

xpause(10000);
handles.TXTstat.String = "Ready";
  

//////////
// Callbacks are defined as below. Please do not delete the comments as it will be used in coming version
//////////




function pb_save_callback(handles)
//Write your callback for  pb_save  here

h = handles.h;
nfile=uiputfile(["*.txt";"*.dat"],"c:/", "Choose a file name"); //get filename to save results (and background)
UVfile=nfile+".dat"; // filename for scan
BKfile=nfile+"backr.dat"; // filename for background
u=file("open",UVfile)
v=file("open",BKfile)
for k=1:200
 write(v,UV(k,1)); // write background
 write(u,UV(k,2)); // write scan     
end
file("rewind",u)
file("close",u)
file("rewind",v)
file("close",v)

UVfile = resume(UVfile); //keep filename
endfunction


function pb_scan_callback(handles)
//Write your callback for  pb_scan  here

// SCAN ROUTINE

// 1. Panel Check
// First check if lower panel is in
handles.TXT_LPan.String = "Check"
h = handles.h;
handles.comm = "lpanel.";
stat = uvCOM(handles);
LI = %F;
if stat == "ok" then
 LI = %T;
 handles.TXT_LPan.String = "ok";
 else
 handles.TXT_LPan.String = "no";
end
LPanIn = LI;
xpause(100000);
// check if upper panel is in
handles.TXT_UPan.String = "Check"
h = handles.h;
handles.comm = "upanel.";
stat = uvCOM(handles);
UI = %F;
if stat == "ok" then
 UI = %T;
 handles.TXT_UPan.String = "ok";
 else
 handles.TXT_UPan.String = "no";
end
UPanIn = UI;
xpause(100000);

// SCAN if panels in
sca(handles.ax_rplot); //make first axes current
if UPanIn & LPanIn then
 handles.pb_save.Enable = "off"; // disable all push buttons during scan
 handles.pb_scan.Enable = "off";
 handles.pb_exit.Enable = "off";
 handles.pb_LPanel.Enable = "off";
 handles.pb_UPanel.Enable = "off";
 
// 2. Background Scan
 handles.comm = "scan.";
 stat = uvCOM(handles); // call ARDUINO to start BACKGROUND scan
 UV(1,1) = strtod(stat); // get first value returned from ARDUINO for BACKGROUND scan
 handles.comm = "scanning"; // send unassigned string as long as no new action can be triggered (scan is underway)
 while isnum(stat) // write values into UV matrix as long as numbers are returned
  stat = uvCOM(handles);
  if isnum(stat)
   UVind = UVind + 1;
   UV(UVind,1) = strtod(stat); // write UV value into UV matrix
   plot2d(UV, rect=[0,0,200,max(UV)]); // plot the value live
   handles.TXTstat.String = "background: " + string(stat) + " ÂµW/cm2"; // return the value live
   if UVind == 200/
    handles.TXTstat.String = "Initializing for scan..."; // indicate that stepper needs to go into start position
   end    
  end
 end  
 
 handles.comm = "check."; // check if stepper has gone into start position
 while handles.TXTstat.String <> "Scan finished" 
  stat = uvCOM(handles);
  if stat == "Ready"
   handles.TXTstat.String = "Scan finished"; 
   xpause(100000);
  end
 end

 xpause(100000);
 UVind = 1; 
 h = handles.h;
 handles.comm = "UVon."; // switch UV light ON for scan and let it be confirmed by Reflectometer
 stat = uvCOM(handles);
 if stat == "UVison"
  handles.TXTstat.String = "UV on";         
  handles.TXTuvon.String = "UV on";  
  handles.TXTuvon.ForegroundColor=[1,0,0];
 end
 xpause(1000000);
// 3. UV Scan
 handles.comm = "scan.";
 stat = uvCOM(handles); // call ARDUINO to start SCAN
 UV(1,2) = strtod(stat); // get first value returned from ARDUINO for SCAN
 handles.comm = "scanning"; // send unassigned string as long as no new action can be triggered (scan is underway)
 while isnum(stat) // write values into UV matrix as long as numbers are returned
  stat = uvCOM(handles);
  if isnum(stat)
   UVind = UVind + 1;
   UV(UVind,2) = strtod(stat); // write UV value into UV matrix
   plot2d(UV, rect=[0,0,200,max(UV)]); // plot the value live
   handles.TXTstat.String = "scan: " +string(stat) + " ÂµW/cm2"; // return the value live
   if UVind == 200
    handles.TXTstat.String = "Initializing..."; // indicate that stepper needs to go into start position   
   end   
  end
 end  
 
 handles.comm = "check."; // check if stepper has gone into start position
 while handles.TXTstat.String <> "Scan finished" 
  stat = uvCOM(handles);
  if stat == "Ready"
   handles.TXTstat.String = "Scan finished"; 
   xpause(100000);
  end
 end
  
 xpause(100000);
 handles.comm = "UVoff."; // switch UV light OFF after scan and let it be confirmed by Reflectometer
 stat = uvCOM(handles);
 if stat == "UVisoff"
  handles.TXTstat.String = "UV off";    
  handles.TXTuvon.String = "UV off"; 
  handles.TXTuvon.ForegroundColor=[0,1,0];
 end
 UVind = 1; 
 xpause(10000);
 handles.TXTstat.String = "Ready"

 // 4. Calculations
 SCRES(1:15,1)="";
 SCRES(1,2)="Parameter"; 
 SCRES(2,2)="Avg. Int. Backgr."; // name the result parameters 
 SCRES(3,2)="Std. Dev. Backgr.";
 SCRES(4,2)="Avg. Int. DIRECT";
 SCRES(5,2)="Avg. Int. INDIRECT";
 SCRES(6,2)="Max. Int. DIRECT";
 SCRES(7,2)="Max. Int. INDIRECT";
 SCRES(8,2)="80% max range";
 SCRES(9,2)="50% max range";
       
 SCRES(1,3)="Value";
 SCRES(2,3)=string(mean(UV(1:200,1))); // calculate several statistic values
 SCRES(3,3)=string(stdev(UV(1:200,1)));
 SCRES(4,3)=string(mean(UV(1:100,2)));
 SCRES(5,3)=string(mean(UV(100:200,2)));
 SCRES(6,3)=string(max(UV(1:100,2)));
 SCRES(7,3)=string(max(UV(100:200,2)));
 eightymr=0; // calculate range of scan with minimum 50 or 80% of max value
 fiftymr=0;
 for UVind=1:200
  if UV(UVind,2)>0.5 * max(UV(1:200,2))
   fiftymr=fiftymr + 1;    
  end  
  if UV(UVind,2)>0.8 * max(UV(1:200,2))
   eightymr=eightymr + 1;    
  end
 end
 UVind = 1; 
 SCRES(8,3)=string(eightymr);
 SCRES(9,3)=string(fiftymr);
 handles.lst_results.String = SCRES;  // list all calculated values in list object
 handles.pb_save.Enable = "on"; // enable all push buttons during scan
 handles.pb_scan.Enable = "on";
 handles.pb_exit.Enable = "on";
 handles.pb_LPanel.Enable = "on";
 handles.pb_UPanel.Enable = "on";            
 UV = resume(UV);
   
else
 handles.TXTstat.String = "ERROR: missing Panels"; // ERROR if scan was requested but panels not in
 disp (UPanIn);
 disp (LPanIn);
end
endfunction


function lst_results_callback(handles)
//Write your callback for  lst_results  here
endfunction


function pb_LPanel_callback(handles)
//Write your callback for  pb_LPanel  here

handles.TXT_LPan.String = "Check" // Check if lower panel is in and let it be confirmed by reflectometer
h = handles.h;
handles.comm = "lpanel.";
stat = uvCOM(handles);
LI = %F;
if stat == "ok" then
 LI = %T;
 handles.TXT_LPan.String = "ok";
 else
 handles.TXT_LPan.String = "no";
end
LPanIn = resume(LI);
xpause(1000000);
endfunction

function pb_UPanel_callback(handles)
//Write your callback for  pb_UPanel  here

handles.TXT_UPan.String = "Check" // Check if upper panel is in and let it be confirmed by reflectometer
h = handles.h;
handles.comm = "upanel.";
stat = uvCOM(handles);
UI = %F;
if stat == "ok" then
 UI = %T;
 handles.TXT_UPan.String = "ok";
 else
 handles.TXT_UPan.String = "no";
end
UPanIn = resume(UI);
xpause(1000000);
endfunction


function pb_exit_callback(handles)
//Write your callback for  pb_exit  here
closeserial(h); // cut connection and exit application
close();
endfunction


function stat = uvCOM(handles)
h = handles.h;
comm = handles.comm;
if comm <> "scanning" then
 writeserial(h, comm); // send action to execute to ARDUINO unless in scanning mode
end
stat="";
xpause(50000);
if h ~= -1 
 Serial_data = readserial(h,1); // Read a character from the usb buffer.
 while Serial_data ~= "." 
  stat = stat + Serial_data;
  Serial_data = readserial(h,1); // Read a character from the usb buffer.
 end
end // while Serial_communication ~= -1 & Button_state == %t
endfunction


